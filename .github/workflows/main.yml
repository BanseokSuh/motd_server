ENV:
  DOCKER_CONTAINER_NAME: motd_server

name: MOTD CI/CD
run-name: ${{ github.actor }} is deploying MOTD
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  ci-cd:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: main

      # CI
      ## Java 21 세팅
      - name: Set up Java 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'corretto'

      ## gradle caching (빌드 시간 줄이기)
      - name: Gradle Caching
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      ## 환경별 yml 파일 생성
      - name: Make application.yml
        if: contains(github.ref, 'main')
        run: |
          mkdir -p src/main/resources
          touch src/main/resources/application.yml
          touch src/main/resources/application-prod.yml
          echo "${{ secrets.APPLICATION_YML }}" | base64 --decode > src/main/resources/application.yml
          echo "${{ secrets.APPLICATION_PROD_YML }}" | base64 --decode > src/main/resources/application-prod.yml
        shell: bash

      ## gradle chmod
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      ## Spring Boot 프로젝트 build
      - name: Build with Gradle
        run: ./gradlew clean build -x test

      ## Docker 이미지 빌드 & Push
      - name: Docker Image Build & Push
        run: |
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker build -t ${{ secrets.DOCKER_USERNAME }}/motd:prod .
          docker push ${{ secrets.DOCKER_USERNAME }}/motd:prod

      # CD
      ## EC2 배포
      - name: Docker image pull & Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }} # EC2 인스턴스 퍼블릭 DNS
          username: ubuntu
          key: ${{ secrets.EC2_PRIVATE_KEY }} # pem 키
          # 도커 작업
          script: |
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/motd:prod
            sudo docker stop $(sudo docker ps -a -q)
            sudo docker rm $(sudo docker ps --filter 'status=exited' -a -q)
            sudo docker run -d --name ${{ DOCKER_CONTAINER_NAME }} --log-driver=syslog -p 8080:8080 ${{ secrets.DOCKER_USERNAME }}/motd:prod
            sudo docker image prune -a -f
